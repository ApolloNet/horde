pico-8 cartridge // http://www.pico-8.com
version 16
__lua__

-- orignal code from @bridgs_dev@twitter.com
-- https://github.com/bridgs/pico-8-for-beginners/

local game_objects

function _init()
  game_objects={}
  make_player(64,24)
  make_blocks()
end

function _update()
  srand(12)
  -- update all the game objects
  local obj
  for obj in all(game_objects) do
    obj:update()
  end
end

function _draw()
  draw_landscape(16,16,'sand')
  -- draw a lake
  draw_lake(32,32,4,3)
  -- draw all the game objects
  local obj
  for obj in all(game_objects) do
    obj:draw()
  end
end

-- draw landscape
function draw_landscape(width,height,current)
  local landscapes={
    sand={bgcolor=10,color=9},
    grass={bgcolor=3,color=11},
    water={bgcolor=12,color=7}
  }
  local ls=landscapes[current]
  cls(ls.bgcolor)
  local x=0
  while x<width do
    local y=0
    while y<height do
      local sprite=flr(rnd(8))+16
      pal(14,ls.color)
      spr(sprite,x*8,y*8)
      y+=1
    end
    x+=1
  end
end

-- game object creation functions
function make_player(x,y)
  return make_game_object("player",x,y,{
    width=8,
    height=8,
    move_speed=1,
    is_standing_on_block=false,
    is_behind_a_block=false,
    walk_counter=0,
    walk_sprites=4,
    sprite=1,

    -- update velocity
    update_move=function(self)
      -- apply friction
      self.velocity_x*=0.2
      self.velocity_y*=0.2
      -- move the player with the arrow keys
      if btn(0) then
        self.velocity_x=-self.move_speed
      end
      if btn(1) then
        self.velocity_x=self.move_speed
      end
      if btn(2) then
        self.velocity_y=-self.move_speed
      end
      if btn(3) then
        self.velocity_y=self.move_speed
      end
      -- z button
      if btn(4) and self.is_standing_on_block then
        
      end
      -- apply wind
      local w = wind(self.x,self.y,self.is_behind_a_block)
      self.velocity_x-=w.x
      self.velocity_y-=w.y
      -- make sure the velocity doesn't get too big
      self.velocity_x=mid(-3,self.velocity_x,3)
      self.velocity_y=mid(-3,self.velocity_y,3)
    end,

    -- update wind
    update_wind=function(self)
      local wind={
        x=0,
        y=0
      }
      -- little random wind
      wind.x+=rnd(1)
      wind.y+=rnd(2)-1
      -- standing on a block
      if self.is_standing_on_block then
        --to something
      end
      -- behind a block
      if self.is_behind_a_block then
        --to something
      end
      -- apply wind
      self.velocity_x-=wind.x
      self.velocity_y-=wind.y
    end,

    -- update walk counter
    update_walk_counter=function(self)
      if self.walk_counter==self.walk_sprites*8 then
        self.walk_counter=0
      else
        self.walk_counter+=1
      end
    end,
    
    -- update sprite
    update_sprite=function(self)
      local walk_sprites_first=2
      self.sprite=mid(
        walk_sprites_first,
        flr(self.walk_counter/8)+1,
        self.walk_sprites+walk_sprites_first
      )
    end,

    -- update object collision
    update_object_collision=function(self)
      for_each_game_object("coin",function(coin)
        if self:check_for_hit(coin) and not coin.is_collected then
          coin.is_collected=true
          sfx(4)
        end
      end)
    end,

    -- update block collision
    update_block_collision=function(self)
      self.is_standing_on_block=false
      self.is_behind_a_block=false
      for_each_game_object("block",function(block)
        local collision_dir=self:check_for_collision(block,3.1)
        self:handle_collision(block,collision_dir)
        -- left: standing on a block
        if collision_dir=="left" then
          self.is_standing_on_block=true
          self.sprite=5
        end
        -- right: protecting from the wind
        if collision_dir=="right" then
          -- todo: do we need a "was behind" ?
          self.is_behind_a_block=true
        end
      end)
    end,

    -- global update
    update=function(self)
      self:update_move()
      self:update_wind()
      self:update_object_collision()
      self:update_block_collision()
      self:update_walk_counter()
      self:update_sprite()
      -- apply the velocity
      self.x+=self.velocity_x
      self.y+=self.velocity_y
    end,

    -- draw
    draw=function(self)
      spr(self.sprite,self.x,self.y)
      -- game over
      if self.x<=0 then
        print("game over",5,5,7)
      end
    end
  })
end

-- get wind for the 8x8 cell cx,cy
-- todo: return x and y
function wind(cx,cy,behind)
  local wind={
    x=0,
    y=0
  }
  -- a little one
  wind.x+=rnd(rnd(20))/10
  wind.y+=rnd(rnd(20))/10
  -- behind a block
  if behind then
    --wind=0
  end
  -- return wind
  return wind
end

-- make a block
function make_block(sprite,x,y)
  return make_game_object("block",x,y,{
    width=8,
    height=8,
    draw=function(self)
      spr(sprite,self.x,self.y)
    end
  })
end

-- make some blocks
function make_blocks()
  local num=64
  local sprites=11
  i=0
  while i<num do
    local x=flr(rnd(16))*8
    local y=flr(rnd(16))*8
    local sprite=rnd(sprites)+32
    make_block(sprite,x,y)
    i+=1
  end
end

-- draw lake
-- @params top_x, top_y: px from top left corner
-- @params wide_x, wide_y: number of 8x8 cells wide
function draw_lake(top_x,top_y,wide_x,wide_y)
  local sprites={
    {13,14,15},
    {29,30,31},
    {45,46,47}
  }
  x=1
  while x<=wide_x do
    y=1
    while y<=wide_y do
      local sprite=sprites[2][2]
      if (x==1) then sprite=sprites[2][1] end
      if (x==wide_x) then sprite=sprites[2][3] end
      if (y==1) then sprite=sprites[1][2] end
      if (y==wide_y) then sprite=sprites[3][2] end
      if (x==1 and y==1) then sprite=sprites[1][1] end
      if (x==wide_x and y==1) then sprite=sprites[1][3] end
      if (x==1 and y==wide_y) then sprite=sprites[3][1] end
      if (x==wide_x and y==wide_y) then sprite=sprites[3][3] end
      spr(sprite,top_x+x*8,top_y+y*8)
      y+=1
    end
  x+=1
  end
end

function make_game_object(name,x,y,props)
  local obj={
    name=name,
    x=x,
    y=y,
    velocity_x=0,
    velocity_y=0,
    update=function(self)
      -- do nothing
    end,
    draw=function(self)
      -- don't draw anything
    end,
    draw_bounding_box=function(self,color)
      rect(self.x,self.y,self.x+self.width,self.y+self.height,color)
    end,
    center=function(self)
      return self.x+self.width/2,self.y+self.height/2
    end,
    check_for_hit=function(self,other)
      return bounding_boxes_overlapping(self,other)
    end,
    check_for_collision=function(self,other,indent)
      local x,y,w,h=self.x,self.y,self.width,self.height
      local top_hitbox={x=x+indent,y=y,width=w-2*indent,height=h/2}
      local bottom_hitbox={x=x+indent,y=y+h/2,width=w-2*indent,height=h/2}
      local left_hitbox={x=x,y=y+indent,width=w/2,height=h-2*indent}
      local right_hitbox={x=x+w/2,y=y+indent,width=w/2,height=h-2*indent}
      if bounding_boxes_overlapping(bottom_hitbox,other) then
        return "down"
      elseif bounding_boxes_overlapping(left_hitbox,other) then
        return "left"
      elseif bounding_boxes_overlapping(right_hitbox,other) then
        return "right"
      elseif bounding_boxes_overlapping(top_hitbox,other) then
        return "up"
      end
    end,
    handle_collision=function(self,other,dir)
      if dir=="down" then
        self.y=other.y-self.height
        if self.velocity_y>0 then
          self.velocity_y=0
        end
      elseif dir=="left" then
        self.x=other.x+other.width
        if self.velocity_x<0 then
          self.velocity_x=0
        end
      elseif dir=="right" then
        self.x=other.x-self.width
        if self.velocity_x>0 then
          self.velocity_x=0
        end
      elseif dir=="up" then
        self.y=other.y+other.height
        if self.velocity_y<0 then
          self.velocity_y=0
        end
      end
    end
  }
  -- add additional properties
  local key,value
  for key,value in pairs(props) do
    obj[key]=value
  end
  -- add it to the list of game objects
  add(game_objects,obj)
  -- return the game object
  return obj
end


-- hit detection helper functions
function rects_overlapping(left1,top1,right1,bottom1,left2,top2,right2,bottom2)
  return right1>left2 and right2>left1 and bottom1>top2 and bottom2>top1
end

function bounding_boxes_overlapping(obj1,obj2)
  return rects_overlapping(obj1.x,obj1.y,obj1.x+obj1.width,obj1.y+obj1.height,obj2.x,obj2.y,obj2.x+obj2.width,obj2.y+obj2.height)
end

-- for each game object helper function
function for_each_game_object(name,callback)
  local obj
  for obj in all(game_objects) do
    if obj.name==name then
      callback(obj)
    end
  end
end


__gfx__
00000000001111000001111000011110000000000000000011110000000000000000000000000000000000000000000000000000000099999999999999000b00
000000000111ff0000111ff000111ff001111110011111101fff000000000000000000000000000000000000000000000000000000099bcccccbbbccc990b7b0
00700700011ff5000111ff500111ff5000111ff000111ff01f5f00000000000000000000000000000000000000000000000000000999bcccccccbccccc999b00
00077000011fff000011f7f00011fff00001ff500001ff50177f000000000000000000000000000000000000000000000000000009bccccccccccccccccc9900
000770000122200000022e0000022e0000022ff0000227f02220000000000000000000000000000000000000000000000000000049bcccccccccccccccccc900
007007000022e000002220000022200000222e0000222e00e220000000000000000000000000000000000000000000000000000049bcccccccccccccccccc990
0000000000222000002220000022200000222000002220002220000000000000000000000000000000000000000000000000000049cccccccccccccccccccc90
0000000000044000004400000044000000044000004400004400000000000000000000000000000000000000000000000000000044cccccccccccccccccccc90
0000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000000000004cccccccccccccccccccccc9
00000000e000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000004bccccccccccccccccccccc9
000000000e00000e000ee0000000000000000000e07e0000000000000000000000000000000000000000000000000000000000004cccccccccccccccccccccc9
0000000000000000000000000000e0000000000000e00000000000000000000000000000000000000000000000000000000000004ccbccccccccccccccccccc9
0000000000000000000000000000000000e0e00000000000000000000ee0000000000000000000000000000000000000000000004bccccccccccccccccccccc9
000000000000000000000000000000e000ee00000000000000000000ee0000ee00000000000000000000000000000000000000004bccccccccccccccccccccc9
00000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000004cccccccccccccccccccccc9
0000000000000000ee0000000000000000000000000000000eee00000000000000000000000000000000000000000000000000004cccccccccccccccccccccc9
0003b3b00003b3b000ffff0000000000fff0000000666600000000006660000000777700000000007770000000000000000000004ccbccccccccccccccccccc9
0b39333b0b32333b0ffffff0000ff000fff0ffff06666660000660006660666607777770000770007770777700000000000000004bbbbccbccccccccccccccc9
bb43bb33bb43bb33fffffff000fff9004494ffff6666666000666500115166667777777000777600dd6d7777000000000000000044bbbccccccccccccccbbcc9
b444343bb444383bfffff9900ffff9904ff4ffff66666110066665501661666677777dd007777660d77d77770000000000000000444bbbcccccccccccbb8bbc9
0b344339083443324fff94ffffff49999ff999995666156666661555566555556777d6777777d66667766666000000000000000044444bcccccbccccccbbbcc9
343b434434374344944494ffff44449999999944155515666611115555555511d666d67777dddd66666666dd000000000000000044444bcccbbbbccbcccccc99
0443434b0443434b99499444f449444999449444115115556115111555115111dd6dd6667dd6ddd666dd6ddd00000000000000000444444b9999999999990900
094444bb094444bb0949994044444444444444400151115011111111111111100d6ddd60ddddddddddddddd00000000000000000004444444444444444444000
92222229000999004ffffff90ffffff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
a444444a0114449094ffff9f9ffffff9066677700999aaa000800000000000000000000000000000000000000000000000000000000000000000000000000000
a4aaaa4a14444449994ff9ff9ffffff906111170092222a000080000000000000000000000000000000000000000000000000000000000000000000000000000
aaa11aaa1444444999949fff9ffffff906555170094442a0003bbb00000000000000000000000000000000000000000000000000000000000000000000000000
99a11a991444444999914fff94444449075551600a44429003333b00000000000000000000000000000000000000000000000000000000000000000000000000
92aaaa2901444449995994ff94444449075551600a4442903333333b000000000000000000000000000000000000000000000000000000000000000000000000
a444444a001444909599994f999999990075560000a4490000000000000000000000000000000000000000000000000000000000000000000000000000000000
aaaaaaaa000111005999999444444444000660000009900000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0000000000000000808000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
1010101010101010101210101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1010101010111310101010101210101300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1012101013101010141110101010121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1010101011101010101013101010121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1010101210101012101110131010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1010101110101010131110101310101300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1010111213121111131313121110121000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1012131013101310131113101111101000000000050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1010101012101011131310101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1010101213101311131210101012131000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1010101010101010121110101013131000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1110101313131012111111111311101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1010131011131311111010101211101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1010101012111110101012131111101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1010131011101010101310101011101000000000000005000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1010101210101012101010121010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
